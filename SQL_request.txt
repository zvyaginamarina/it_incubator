MakeUpperCase

select s, upper(s) as res from makeuppercase;

------------------------------------------------------------------------------

SQL Basics: Simple EXISTS

select departments.name, departments.id from departments
where exists
(select price from sales where sales.department_id=departments.id and price > 98);

--------------------------------------------------------------------------------
SQL Basics: Simple IN

select id, name from departments
where id in (select department_id from sales where price > 98.00)

---------------------------------------------------------------------------------
Easy SQL: Counting and Grouping

select race, count(id) as count from demographics
group by race
order by count DESC;

-----------------------------------------------------------------------------
Consolidating Sales and Returns Data

select coalesce(ts.product_id, tr.product_id) as product_id, 
ts.quantity as sale_qty, 
tr.quantity as return_qty, 
coalesce(ts.date, tr.date) as date
from table_sales as ts
full join table_returns as tr
on ts.product_id=tr.product_id and ts.date=tr.date
order by  product_id asc, date asc;

-----------------------------------------------------------------------------
Customers with All Orders Undelivered

select distinct customer_id
from orders 
where customer_id not in 
(select customer_id from orders where delivery_date is not null) 
order by 1 desc

-----------------------------------------------------------------------------
Number of New Customers per Date

select x.date as date, count(customer_id) as num_new_customers
from
(select customer_id, min(date) as date
from customer_purchases
group by customer_id) as x
group by date
order by date asc

--------------------------------------------------------------------------------
Books That Are Always Being Returned

select distinct b.book_id, b.title 
from books b
right join loans l
on b.book_id=l.book_id
where b.book_id not in
(select l.book_id 
from loans l
where return_date is null)
order by b.book_id desc

----------------------------------------------------------------------------------
The Dunning-Kruger effect

select id,name,(perceived_skill_level-actual_skill_level) as skill_overestimation,
case 
 when (perceived_skill_level-actual_skill_level) between 1 and 2 then 'Mild case of overconfidence'
 when (perceived_skill_level-actual_skill_level) between 2 and 5 then 'Moderate case of overconfidence'
 when (perceived_skill_level-actual_skill_level) between 5 and 7 then 'Serious case of overconfidence'
 else 'Extreme case of Dunning-Kruger effect detected!'
 end as overconfidence_category
 from users 
 where perceived_skill_level>actual_skill_level
 order by skill_overestimation desc, id desc
-- Beware of Dunning-Kruger effect: you might not be as good as you think!

---------------------------------------------------------------------------------
Users with More Than 2 Videos Watched

select user_id, video_id 
from user_playlist
group by user_id, video_id
having user_id in
(select user_id from
(select user_id, count(video_id) from
(select user_id, video_id, count(video_id)
from user_playlist
group by user_id, video_id
order by 1 asc) as x
group by user_id
having count(video_id)>1) as z)
order by 1 asc, 2 asc

-----------------------------------------------------------------------
All-Inclusive Shoppers

with cte as (
select count(id) as pr_sum from products)

select uid as user_id, uname as name
from
(select uid, uname, count(pr_id)
from
(select u.id as uid, u.name as uname, o.product_id as pr_id, p.product_name
from users u
full join orders o
on u.id=o.user_id
full join products p
on o.product_id=p.id
order by u.id asc, o.product_id asc) as x
group by uid, uname
having count(pr_id) = (select pr_sum from cte)) as y
order by 1 desc

--------------------------------------------------------------------------
SQL with Sailor Moon: Thinking about JOINs...

select ss.senshi_name as sailor_senshi, ss.real_name_jpn as real_name,
c.name as cat, sc.school as school
from sailorsenshi ss
left join cats c
on ss.cat_id=c.id
full join schools sc
on sc.id=ss.school_id

------------------------------------------------------------------------------
Sorting Madness: part 2

with mltp as (
select order_id, product_id,
min(order_id) over (partition by product_id) as min_order_id
from orders
where product_id in
(select product_id
from
(select product_id, count(order_id)
from orders
group by product_id
having count(order_id)>1) as x)
order by min_order_id asc, 2 desc, 1 asc),
 
sngl as (
select order_id, product_id,
min(order_id) over (partition by product_id) as min_order_id
from orders
where product_id in
(select product_id
from
(select product_id, count(order_id)
from orders
group by product_id
having count(order_id)=1) as y)
order by min_order_id asc, 2 desc, 1 asc)

select order_id, product_id from mltp
union all
select order_id, product_id from sngl

